# encoding: utf-8

# Copyright (c) 2012, Daniel Andersen (dani_ande@yahoo.dk)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import uuid

from EtikTakApp.util import util
from EtikTakApp.models.users import MobileNumber

from django.db import models
from datetime import datetime

class Client(models.Model):
    uid = models.CharField(max_length=255)
    created_timestamp = models.DateTimeField()

    def create_client(self):
        """
        Creates and saves a client with autogenerated UID.
        """
        client = Client(uid = uuid.uuid4(), created_timestamp = datetime.now())
        client.save()
        return client

    def __unicode__(self):
        return u"%s" % self.uid

    class Meta:
        verbose_name = u"Klient"
        verbose_name_plural = u"Klienter"
        app_label = "EtikTakApp"

class ClientKey(models.Model):
    uid = models.CharField(max_length=255) # EncryptedCharField(max_length=255)
    mobile_number_hash_password_hash_hashed = models.CharField(max_length=255) # EncryptedCharField(max_length=255)
    challenge_hash = models.CharField(max_length=255) # EncryptedCharField(max_length=255)
    created_timestamp = models.DateTimeField()

    @staticmethod
    def create_client_key(mobile_number, password):
        """
        Creates and saves a client key with autogenerated UID and with a hash of
        the sum of the specified mobile number hashed concatenated with the specified
        password hashed. Challenge is left empty.
        """
        if MobileNumber.objects.exists(mobile_number):
            raise ValueError("Mobile number %s already exists" % mobile_number)
        client_key = ClientKey(
            uid = uuid.uuid4(),
            mobile_number_hash_password_hash_hashed = util.sha256(util.sha256(mobile_number) + util.sha256(password)),
            created_timestamp = datetime.now())
        client_key.save()
        return client_key

    def __unicode__(self):
        return u"%s | %s | %s" % (self.uid, self.mobile_number_hash_password_hash_hashed, self.challenge_hash)

    class Meta:
        verbose_name = u"Klientnøgle"
        verbose_name_plural = u"Klientnøgler"
        app_label = "EtikTakApp"

